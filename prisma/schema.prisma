generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  user
  admin
}


enum StudyType {
  GACO
  MDFS
  MCMO
  MACAST
  CJ
  INFOCOM
}

model User {
  id            String      @id
  email         String      @unique
  study         Study?
  name          String?
  role          UserRole    @default(user)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  emailVerified DateTime?   @map("email_verified")
  activities    Activity[]  @relation("ActivityCreator")

  @@map("users")
  Feedback Feedback[]
}

model Study {
  id String @id @default(uuid())
  name String
  type StudyType
  level String
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String? @unique
}


enum ActivityStatus {
  draft
  published
  archived
}

model Activity {
  id          String          @id @default(uuid())
  status      ActivityStatus @default(draft)
  title       String          @db.VarChar(55)
  subtitle    String?         @db.VarChar(55)
  contact     String?         
  type        ActivityCategory? @default(structure)
  description String?
  imageUrl    String?         @map("image_url")
  duration    Int?            // Durée en mois
  missions    String[]        // Liste des missions effectuées
  isPaid      Boolean?        @map("is_paid") // Stage gratifié ou non
  rating      Int?            // Avis stage (1-5 étoiles)
  addressId   String?         @map("address_id") @unique
  address     Address?        @relation(fields: [addressId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  createdBy   String          @map("created_by")
  creator     User            @relation("ActivityCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("activities")
}
enum ActivityCategory {
  structure
  event
  activity
  other

  @@map("activity_category")
}

model Address {
  id        String    @id @default(uuid())
  street    String
  city      String
  state     String?
  zip       String
  country   String?
  latitude  Float?
  longitude Float?
  
  // Relations
  activity  Activity? // Optional relation to Activity
  
  @@map("addresses")
}

model Feedback {
  id        String   @id @default(uuid())
  message   String
  status    FeedbackStatus @default(pending)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  senderEmail String? 
  createdBy String?  @map("created_by")
  creator   User?    @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  @@map("feedbacks")
}

enum FeedbackStatus {
  pending
  inProgress
  resolved
  rejected

  @@map("feedback_status")
}